package com.xyx.javadesignmode.ui.a2;

import androidx.lifecycle.LiveData;
import androidx.lifecycle.MutableLiveData;
import androidx.lifecycle.ViewModel;

public class GalleryViewModel extends ViewModel {

    private MutableLiveData<String> mText;

    public GalleryViewModel() {
        mText = new MutableLiveData<>();
        mText.setValue("设计模式六大原则（2）：里氏替换原则\n" +
                "肯定有不少人跟我刚看到这项原则的时候一样，对这个原则的名字充满疑惑。其实原因就是这项原则最早是在 1988 年，由麻省理工学院的一位姓里的女士（Barbara Liskov）提出来的。定义 1：如果对每一个类型为 T1 的对象 o1，都有类型为 T2 的对象 o2，使得以 T1 定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 T2 是类型 T1 的子类型。\n" +
                "定义 2：所有引用基类的地方必须能透明地使用其子类的对象。\n" +
                "问题由来：有一功能 P1，由类 A 完成。现需要将功能 P1 进行扩展，扩展后的功能为 P，其中\n" +
                "P 由原有功能 P1 与新功能 P2 组成。新功能 P 由类 A 的子类 B 来完成，则子类 B 在完成新功能 P2 的同时，有可能会导致原有功能 P1 发生故障。\n" +
                "解决方案：当使用继承时，遵循里氏替换原则。类B 继承类 A 时，除添加新的方法完成新增功能 P2 外，尽量不要重写父类 A 的方法，也尽量不要重载父类 A 的方法。\n" +
                "继承包含这样一层含义：父类中凡是已经实现好的方法（相对于抽象方法而言），实际上是在设定一系列的规范和契约，虽然它不强制要求所有的子类必须遵从这些契约，但是如果子类对这些非抽象方法任意修改，就会对整个继承体系造成破坏。而里氏替换原则就是表达了这一层含义。\n" +
                "继承作为面向对象三大特性之一，在给程序设计带来巨大便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加了对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能会产生故障。\n" +
                "举例说明继承的风险，我们需要完成一个两数相减的功能，由类 A 来负责。\n" +
                "\n" +
                "class A {\n" +
                "public int func1(int a, int b) {\n return a - b;\n" +
                "}\n" +
                "}\n" +
                " \n" +
                "public class Client {\n" +
                "public static void main(String[] args) {\n A a = new A();\n" +
                "System.out.println(\"100-50=\" + a.func1(100, 50)); \nSystem.out.println(\"100-80=\" + a.func1(100, 80));\n" +
                "}\n" +
                "}\n" +
                "\n" +
                "运行结果：\n" +
                "\n" +
                "100-50=50\n" +
                "100-80=20\n" +
                "\n" +
                "后来，我们需要增加一个新的功能：完成两数相加，然后再与 100 求和，由类 B 来负责。即类 B 需要完成两个功能：\n" +
                "1、两数相减。\n" +
                "2、两数相加，然后再加 100。\n" +
                "由于类 A 已经实现了第一个功能，所以类 B 继承类 A 后，只需要再完成第二个功能就可以了， 代码如下：\n" +
                "\n" +
                "class B extends A {\n" +
                "public int func1(int a, int b) {\n return a + b;\n" +
                "}\n" +
                "\n" +
                "public int func2(int a, int b) { \nreturn func1(a, b) + 100;\n" +
                "}\n" +
                "}\n" +
                "\n" +
                "public class Client {\n" +
                "public static void main(String[] args) { \nB b = new B();\n" +
                "System.out.println(\"100-50=\" + b.func1(100, 50)); \nSystem.out.println(\"100-80=\" + b.func1(100, 80)); System.out.println(\"100+20+100=\" + b.func2(100, 20));\n" +
                "}\n" +
                "}\n" +
                "\n" +
                "类 B 完成后，运行结果：\n" +
                "\n" +
                "100-50=150\n" +
                "100-80=180\n" +
                "100+20+100=220\n" +
                " \n" +
                "\n" +
                "我们发现原本运行正常的相减功能发生了错误。原因就是类 B 在给方法起名时无意中重写了父类的方法，造成所有运行相减功能的代码全部调用了类 B 重写后的方法，造成原本运行正常的功能出现了错误。\n" +
                "在本例中，引用基类 A 完成的功能，换成子类 B 之后，发生了异常。在实际编程中，我们常常会通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的几率非常大。如果非要重写父类的方法，比较通用的做法是：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖、聚合，组合等关系代替。\n" +
                "里氏替换原则通俗的来讲就是：子类可以扩展父类的功能，但不能改变父类原有的功能。它包含以下 4 层含义：\n" +
                "子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法。子类中可以增加自己特有的方法。\n" +
                "当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松。\n" +
                "当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。看上去很不可思议，因为我们会发现在自己编程中常常会违反里氏替换原则，程序照样跑的好好的。所以大家都会产生这样的疑问，假如我非要不遵循里氏替换原则会有什么后果？ 后果就是：你写的代码出问题的几率将会大大增加。\n" +
                "\n\n\n\n\n\n\n\n\n\n");
    }

    public LiveData<String> getText() {
        return mText;
    }
}